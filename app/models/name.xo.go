// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Name is the 'name' enum type from schema 'ccdb_dupl'.
type Name uint16

const (
	// NameStarterQuarterly is the 'Starter Quarterly' Name.
	NameStarterQuarterly = Name(1)

	// NameProQuarterly is the 'Pro Quarterly' Name.
	NameProQuarterly = Name(2)

	// NameDragonhatchSubAccount is the 'DragonHatch Sub-Account' Name.
	NameDragonhatchSubAccount = Name(3)

	// NameDragonhatchMasterAccount is the 'DragonHatch Master Account' Name.
	NameDragonhatchMasterAccount = Name(4)

	// NameDragonhatchMonthlyMasterAccount is the 'DragonHatch Monthly - Master Account' Name.
	NameDragonhatchMonthlyMasterAccount = Name(5)

	// NameDragonhatchMonthlySubAccount is the 'DragonHatch Monthly - Sub-Account' Name.
	NameDragonhatchMonthlySubAccount = Name(6)

	// NameWhiteLabelAnnual is the 'White Label Annual' Name.
	NameWhiteLabelAnnual = Name(7)

	// NameWhiteLabelMonthly is the 'White Label Monthly' Name.
	NameWhiteLabelMonthly = Name(8)

	// NamePaidTrial is the 'Paid Trial' Name.
	NamePaidTrial = Name(9)

	// NameXeroPartnerPackage is the 'Xero Partner Package' Name.
	NameXeroPartnerPackage = Name(10)

	// NameXeroPartnerPackageAnnual is the 'Xero Partner Package - Annual' Name.
	NameXeroPartnerPackageAnnual = Name(11)

	// NameStarterMonthly is the 'Starter Monthly' Name.
	NameStarterMonthly = Name(12)

	// NameStartUpAccount is the 'Start-up Account' Name.
	NameStartUpAccount = Name(13)

	// NameStartUpAccountAnnual is the 'Start-up account - Annual' Name.
	NameStartUpAccountAnnual = Name(14)

	// NameProMonthly is the 'Pro Monthly' Name.
	NameProMonthly = Name(15)

	// NameProMonthlyManagedAccount is the 'Pro Monthly - Managed Account' Name.
	NameProMonthlyManagedAccount = Name(16)

	// NameStarterAnnual is the 'Starter Annual' Name.
	NameStarterAnnual = Name(17)

	// NameProAnnual is the 'Pro Annual' Name.
	NameProAnnual = Name(18)

	// NameHrBundle is the 'HR Bundle' Name.
	NameHrBundle = Name(19)

	// NameProAnnualManagedAccount is the 'Pro Annual - Managed Account' Name.
	NameProAnnualManagedAccount = Name(20)

	// NameLawFirmSetUp is the 'Law Firm Set Up' Name.
	NameLawFirmSetUp = Name(21)
)

// String returns the string value of the Name.
func (n Name) String() string {
	var enumVal string

	switch n {
	case NameStarterQuarterly:
		enumVal = "Starter Quarterly"

	case NameProQuarterly:
		enumVal = "Pro Quarterly"

	case NameDragonhatchSubAccount:
		enumVal = "DragonHatch Sub-Account"

	case NameDragonhatchMasterAccount:
		enumVal = "DragonHatch Master Account"

	case NameDragonhatchMonthlyMasterAccount:
		enumVal = "DragonHatch Monthly - Master Account"

	case NameDragonhatchMonthlySubAccount:
		enumVal = "DragonHatch Monthly - Sub-Account"

	case NameWhiteLabelAnnual:
		enumVal = "White Label Annual"

	case NameWhiteLabelMonthly:
		enumVal = "White Label Monthly"

	case NamePaidTrial:
		enumVal = "Paid Trial"

	case NameXeroPartnerPackage:
		enumVal = "Xero Partner Package"

	case NameXeroPartnerPackageAnnual:
		enumVal = "Xero Partner Package - Annual"

	case NameStarterMonthly:
		enumVal = "Starter Monthly"

	case NameStartUpAccount:
		enumVal = "Start-up Account"

	case NameStartUpAccountAnnual:
		enumVal = "Start-up account - Annual"

	case NameProMonthly:
		enumVal = "Pro Monthly"

	case NameProMonthlyManagedAccount:
		enumVal = "Pro Monthly - Managed Account"

	case NameStarterAnnual:
		enumVal = "Starter Annual"

	case NameProAnnual:
		enumVal = "Pro Annual"

	case NameHrBundle:
		enumVal = "HR Bundle"

	case NameProAnnualManagedAccount:
		enumVal = "Pro Annual - Managed Account"

	case NameLawFirmSetUp:
		enumVal = "Law Firm Set Up"
	}

	return enumVal
}

// MarshalText marshals Name into text.
func (n Name) MarshalText() ([]byte, error) {
	return []byte(n.String()), nil
}

// UnmarshalText unmarshals Name from text.
func (n *Name) UnmarshalText(text []byte) error {
	switch string(text) {
	case "Starter Quarterly":
		*n = NameStarterQuarterly

	case "Pro Quarterly":
		*n = NameProQuarterly

	case "DragonHatch Sub-Account":
		*n = NameDragonhatchSubAccount

	case "DragonHatch Master Account":
		*n = NameDragonhatchMasterAccount

	case "DragonHatch Monthly - Master Account":
		*n = NameDragonhatchMonthlyMasterAccount

	case "DragonHatch Monthly - Sub-Account":
		*n = NameDragonhatchMonthlySubAccount

	case "White Label Annual":
		*n = NameWhiteLabelAnnual

	case "White Label Monthly":
		*n = NameWhiteLabelMonthly

	case "Paid Trial":
		*n = NamePaidTrial

	case "Xero Partner Package":
		*n = NameXeroPartnerPackage

	case "Xero Partner Package - Annual":
		*n = NameXeroPartnerPackageAnnual

	case "Starter Monthly":
		*n = NameStarterMonthly

	case "Start-up Account":
		*n = NameStartUpAccount

	case "Start-up account - Annual":
		*n = NameStartUpAccountAnnual

	case "Pro Monthly":
		*n = NameProMonthly

	case "Pro Monthly - Managed Account":
		*n = NameProMonthlyManagedAccount

	case "Starter Annual":
		*n = NameStarterAnnual

	case "Pro Annual":
		*n = NameProAnnual

	case "HR Bundle":
		*n = NameHrBundle

	case "Pro Annual - Managed Account":
		*n = NameProAnnualManagedAccount

	case "Law Firm Set Up":
		*n = NameLawFirmSetUp

	default:
		return errors.New("invalid Name")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Name.
func (n Name) Value() (driver.Value, error) {
	return n.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Name.
func (n *Name) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Name")
	}

	return n.UnmarshalText(buf)
}
