// Package sam contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"golang.org/x/crypto/bcrypt"
)

// User represents a row from 'ccdb_dupl.user'.
type User struct {
	ID                 uint       `json:"_id"`                 // _id
	Username           string     `json:"username"`            // username
	Password           string     `json:"password"`            // password
	AccessToken        NullString `json:"access_token"`        // access_token
	VerificationToken  NullString `json:"verification_token"`  // verification_token
	VerificationStatus NullBool   `json:"verification_status"` // verification_status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ccdb_dupl.user (` +
		`username, password, access_token, verification_token, verification_status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.Username, u.Password, u.AccessToken, u.VerificationToken, u.VerificationStatus)
	res, err := db.Exec(sqlstr, u.Username, u.Password, u.AccessToken, u.VerificationToken, u.VerificationStatus)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = uint(id)
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	// if !u._exists {
	// 	return errors.New("update failed: does not exist")
	// }

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ccdb_dupl.user SET ` +
		`username = ?, password = ?, access_token = ?, verification_token = ?, verification_status = ?` +
		` WHERE _id = ?`

	// run query
	XOLog(sqlstr, u.Username, u.Password, u.AccessToken, u.VerificationToken, u.VerificationStatus, u.ID)
	_, err = db.Exec(sqlstr, u.Username, u.Password, u.AccessToken, u.VerificationToken, u.VerificationStatus, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ccdb_dupl.user WHERE _id = ?`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UserByID retrieves a row from 'ccdb_dupl.user' as a User.
//
// Generated from index 'user__id_pkey'.
func UserByID(db XODB, id uint) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id, username, password, access_token, verification_token, verification_status ` +
		`FROM ccdb_dupl.user ` +
		`WHERE _id = ?`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Username, &u.Password, &u.AccessToken, &u.VerificationToken, &u.VerificationStatus)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByUsername retrieves a row from 'ccdb_dupl.user' as a User.
//
// Generated from index 'username'.
func UserByUsername(db XODB, username string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id, username, password, access_token, verification_token, verification_status ` +
		`FROM ccdb_dupl.user ` +
		`WHERE username = ?`

	// run query
	XOLog(sqlstr, username)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, username).Scan(&u.ID, &u.Username, &u.Password, &u.AccessToken, &u.VerificationToken, &u.VerificationStatus)
	return &u, err
}

func VerifyUser(name, pass string, db *sql.DB) (*User, error) {
	user, err := UserByUsername(db, name)
	if err != nil {
		return nil, errors.New(" Invalid username")
	}

	if err = bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(pass)); err != nil {
		return nil, errors.New(" Invalid Password")
	}
	return user, nil
}
