// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Segment is the 'segment' enum type from schema 'ccdb_dupl'.
type Segment uint16

const (
	// SegmentNa is the 'na' Segment.
	SegmentNa = Segment(1)

	// SegmentEarlyStartUp is the 'Early start-up' Segment.
	SegmentEarlyStartUp = Segment(2)

	// SegmentEarlyEntrepreneur is the 'Early entrepreneur' Segment.
	SegmentEarlyEntrepreneur = Segment(3)

	// SegmentEstablishedEntrepreneur is the 'Established entrepreneur' Segment.
	SegmentEstablishedEntrepreneur = Segment(4)

	// SegmentSmallBusiness is the 'Small business' Segment.
	SegmentSmallBusiness = Segment(5)

	// SegmentSme is the 'SME' Segment.
	SegmentSme = Segment(6)

	// SegmentRisingStar is the 'Rising star' Segment.
	SegmentRisingStar = Segment(7)

	// SegmentScalingStartUp is the 'Scaling start-up' Segment.
	SegmentScalingStartUp = Segment(8)

	// SegmentMidSizeEnterprise is the 'Mid-size enterprise' Segment.
	SegmentMidSizeEnterprise = Segment(9)

	// SegmentLargeEnterprise is the 'Large enterprise' Segment.
	SegmentLargeEnterprise = Segment(10)
)

// String returns the string value of the Segment.
func (s Segment) String() string {
	var enumVal string

	switch s {
	case SegmentNa:
		enumVal = "na"

	case SegmentEarlyStartUp:
		enumVal = "Early start-up"

	case SegmentEarlyEntrepreneur:
		enumVal = "Early entrepreneur"

	case SegmentEstablishedEntrepreneur:
		enumVal = "Established entrepreneur"

	case SegmentSmallBusiness:
		enumVal = "Small business"

	case SegmentSme:
		enumVal = "SME"

	case SegmentRisingStar:
		enumVal = "Rising star"

	case SegmentScalingStartUp:
		enumVal = "Scaling start-up"

	case SegmentMidSizeEnterprise:
		enumVal = "Mid-size enterprise"

	case SegmentLargeEnterprise:
		enumVal = "Large enterprise"
	}

	return enumVal
}

// MarshalText marshals Segment into text.
func (s Segment) MarshalText() ([]byte, error) {
	return []byte(s.String()), nil
}

// UnmarshalText unmarshals Segment from text.
func (s *Segment) UnmarshalText(text []byte) error {
	switch string(text) {
	case "na":
		*s = SegmentNa

	case "Early start-up":
		*s = SegmentEarlyStartUp

	case "Early entrepreneur":
		*s = SegmentEarlyEntrepreneur

	case "Established entrepreneur":
		*s = SegmentEstablishedEntrepreneur

	case "Small business":
		*s = SegmentSmallBusiness

	case "SME":
		*s = SegmentSme

	case "Rising star":
		*s = SegmentRisingStar

	case "Scaling start-up":
		*s = SegmentScalingStartUp

	case "Mid-size enterprise":
		*s = SegmentMidSizeEnterprise

	case "Large enterprise":
		*s = SegmentLargeEnterprise

	default:
		return errors.New("invalid Segment")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Segment.
func (s Segment) Value() (driver.Value, error) {
	return s.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Segment.
func (s *Segment) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Segment")
	}

	return s.UnmarshalText(buf)
}
