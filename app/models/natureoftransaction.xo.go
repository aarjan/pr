// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// NatureOfTransaction is the 'nature_of_transaction' enum type from schema 'ccdb_dupl'.
type NatureOfTransaction uint16

const (
	// NatureOfTransactionNewSales is the 'New sales' NatureOfTransaction.
	NatureOfTransactionNewSales = NatureOfTransaction(1)

	// NatureOfTransactionFirstInstallment is the 'First Installment' NatureOfTransaction.
	NatureOfTransactionFirstInstallment = NatureOfTransaction(2)

	// NatureOfTransactionSubsequentInstallment is the 'Subsequent Installment' NatureOfTransaction.
	NatureOfTransactionSubsequentInstallment = NatureOfTransaction(3)

	// NatureOfTransactionMonthlySubscription is the 'Monthly subscription' NatureOfTransaction.
	NatureOfTransactionMonthlySubscription = NatureOfTransaction(4)

	// NatureOfTransactionOngoingEngagement is the 'Ongoing Engagement' NatureOfTransaction.
	NatureOfTransactionOngoingEngagement = NatureOfTransaction(5)

	// NatureOfTransactionUpgrade is the 'Upgrade' NatureOfTransaction.
	NatureOfTransactionUpgrade = NatureOfTransaction(6)

	// NatureOfTransactionRenewal is the 'Renewal' NatureOfTransaction.
	NatureOfTransactionRenewal = NatureOfTransaction(7)

	// NatureOfTransactionSameMonthRefund is the 'Same month refund' NatureOfTransaction.
	NatureOfTransactionSameMonthRefund = NatureOfTransaction(8)

	// NatureOfTransactionRefund is the 'Refund' NatureOfTransaction.
	NatureOfTransactionRefund = NatureOfTransaction(9)

	// NatureOfTransactionChurn is the 'Churn' NatureOfTransaction.
	NatureOfTransactionChurn = NatureOfTransaction(10)

	// NatureOfTransactionNewSalesRefund is the 'New sales refund' NatureOfTransaction.
	NatureOfTransactionNewSalesRefund = NatureOfTransaction(11)

	// NatureOfTransactionPartnerFirmservices is the 'Partner FirmServices' NatureOfTransaction.
	NatureOfTransactionPartnerFirmservices = NatureOfTransaction(12)
)

// String returns the string value of the NatureOfTransaction.
func (not NatureOfTransaction) String() string {
	var enumVal string

	switch not {
	case NatureOfTransactionNewSales:
		enumVal = "New sales"

	case NatureOfTransactionFirstInstallment:
		enumVal = "First Installment"

	case NatureOfTransactionSubsequentInstallment:
		enumVal = "Subsequent Installment"

	case NatureOfTransactionMonthlySubscription:
		enumVal = "Monthly subscription"

	case NatureOfTransactionOngoingEngagement:
		enumVal = "Ongoing Engagement"

	case NatureOfTransactionUpgrade:
		enumVal = "Upgrade"

	case NatureOfTransactionRenewal:
		enumVal = "Renewal"

	case NatureOfTransactionSameMonthRefund:
		enumVal = "Same month refund"

	case NatureOfTransactionRefund:
		enumVal = "Refund"

	case NatureOfTransactionChurn:
		enumVal = "Churn"

	case NatureOfTransactionNewSalesRefund:
		enumVal = "New sales refund"

	case NatureOfTransactionPartnerFirmservices:
		enumVal = "Partner FirmServices"
	}

	return enumVal
}

// MarshalText marshals NatureOfTransaction into text.
func (not NatureOfTransaction) MarshalText() ([]byte, error) {
	return []byte(not.String()), nil
}

// UnmarshalText unmarshals NatureOfTransaction from text.
func (not *NatureOfTransaction) UnmarshalText(text []byte) error {
	switch string(text) {
	case "New sales":
		*not = NatureOfTransactionNewSales

	case "First Installment":
		*not = NatureOfTransactionFirstInstallment

	case "Subsequent Installment":
		*not = NatureOfTransactionSubsequentInstallment

	case "Monthly subscription":
		*not = NatureOfTransactionMonthlySubscription

	case "Ongoing Engagement":
		*not = NatureOfTransactionOngoingEngagement

	case "Upgrade":
		*not = NatureOfTransactionUpgrade

	case "Renewal":
		*not = NatureOfTransactionRenewal

	case "Same month refund":
		*not = NatureOfTransactionSameMonthRefund

	case "Refund":
		*not = NatureOfTransactionRefund

	case "Churn":
		*not = NatureOfTransactionChurn

	case "New sales refund":
		*not = NatureOfTransactionNewSalesRefund

	case "Partner FirmServices":
		*not = NatureOfTransactionPartnerFirmservices

	default:
		return errors.New("invalid NatureOfTransaction")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for NatureOfTransaction.
func (not NatureOfTransaction) Value() (driver.Value, error) {
	return not.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for NatureOfTransaction.
func (not *NatureOfTransaction) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid NatureOfTransaction")
	}

	return not.UnmarshalText(buf)
}
