// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// NumberOfEmployee is the 'number_of_employees' enum type from schema 'ccdb_dupl'.
type NumberOfEmployee uint16

const (
	// NumberOfEmployee is the '' NumberOfEmployee.
	NilNumberOfEmployee = NumberOfEmployee(1)

	// NumberOfEmployee is the '1' NumberOfEmployee.
	OneNumberOfEmployee = NumberOfEmployee(2)

	// NumberOfEmployee is the '2-5' NumberOfEmployee.
	FiveNumberOfEmployee = NumberOfEmployee(3)

	// NumberOfEmployee is the '6-10' NumberOfEmployee.
	TenNumberOfEmployee = NumberOfEmployee(4)

	// NumberOfEmployee is the '11-50' NumberOfEmployee.
	FiftyNumberOfEmployee = NumberOfEmployee(5)

	// NumberOfEmployee is the '51-100' NumberOfEmployee.
	HundredNumberOfEmployee = NumberOfEmployee(6)

	// NumberOfEmployee is the '>100' NumberOfEmployee.
	HundredPlusNumberOfEmployee = NumberOfEmployee(7)
)

// String returns the string value of the NumberOfEmployee.
func (noe NumberOfEmployee) String() string {
	var enumVal string

	switch noe {
	case NilNumberOfEmployee:
		enumVal = ""

	case OneNumberOfEmployee:
		enumVal = "1"

	case FiveNumberOfEmployee:
		enumVal = "2-5"

	case TenNumberOfEmployee:
		enumVal = "6-10"

	case FiftyNumberOfEmployee:
		enumVal = "11-50"

	case HundredNumberOfEmployee:
		enumVal = "51-100"

	case HundredPlusNumberOfEmployee:
		enumVal = ">100"
	}

	return enumVal
}

// MarshalText marshals NumberOfEmployee into text.
func (noe NumberOfEmployee) MarshalText() ([]byte, error) {
	return []byte(noe.String()), nil
}

// UnmarshalText unmarshals NumberOfEmployee from text.
func (noe *NumberOfEmployee) UnmarshalText(text []byte) error {
	switch string(text) {
	case "":
		*noe = NilNumberOfEmployee

	case "1":
		*noe = OneNumberOfEmployee

	case "2-5":
		*noe = FiveNumberOfEmployee

	case "6-10":
		*noe = TenNumberOfEmployee

	case "11-50":
		*noe = FiftyNumberOfEmployee

	case "51-100":
		*noe = HundredNumberOfEmployee

	case ">100":
		*noe = HundredPlusNumberOfEmployee

	default:
		return errors.New("invalid NumberOfEmployee")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for NumberOfEmployee.
func (noe NumberOfEmployee) Value() (driver.Value, error) {
	return noe.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for NumberOfEmployee.
func (noe *NumberOfEmployee) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid NumberOfEmployee")
	}

	return noe.UnmarshalText(buf)
}
