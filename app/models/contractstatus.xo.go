// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// ContractStatus is the 'contract_status' enum type from schema 'ccdb_dupl'.
type ContractStatus uint16

const (
	// ContractStatus is the '' ContractStatus.
	NilContractStatus = ContractStatus(1)

	// ContractStatusContractSigned is the 'Contract Signed' ContractStatus.
	ContractStatusContractSigned = ContractStatus(2)

	// ContractStatusNoContract is the 'No Contract' ContractStatus.
	ContractStatusNoContract = ContractStatus(3)

	// ContractStatusAwaitingSignature is the 'Awaiting signature' ContractStatus.
	ContractStatusAwaitingSignature = ContractStatus(4)
)

// String returns the string value of the ContractStatus.
func (cs ContractStatus) String() string {
	var enumVal string

	switch cs {
	case NilContractStatus:
		enumVal = ""

	case ContractStatusContractSigned:
		enumVal = "Contract Signed"

	case ContractStatusNoContract:
		enumVal = "No Contract"

	case ContractStatusAwaitingSignature:
		enumVal = "Awaiting signature"
	}

	return enumVal
}

// MarshalText marshals ContractStatus into text.
func (cs ContractStatus) MarshalText() ([]byte, error) {
	return []byte(cs.String()), nil
}

// UnmarshalText unmarshals ContractStatus from text.
func (cs *ContractStatus) UnmarshalText(text []byte) error {
	switch string(text) {
	case "":
		*cs = NilContractStatus

	case "Contract Signed":
		*cs = ContractStatusContractSigned

	case "No Contract":
		*cs = ContractStatusNoContract

	case "Awaiting signature":
		*cs = ContractStatusAwaitingSignature

	default:
		return errors.New("invalid ContractStatus")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for ContractStatus.
func (cs ContractStatus) Value() (driver.Value, error) {
	return cs.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for ContractStatus.
func (cs *ContractStatus) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid ContractStatus")
	}

	return cs.UnmarshalText(buf)
}
