// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// LegalEntityBooking is the 'legal_entity_booking' enum type from schema 'ccdb_dupl'.
type LegalEntityBooking uint16

const (
	// LegalEntityBookingHongKong is the 'Hong Kong' LegalEntityBooking.
	LegalEntityBookingHongKong = LegalEntityBooking(1)

	// LegalEntityBookingSingapore is the 'Singapore' LegalEntityBooking.
	LegalEntityBookingSingapore = LegalEntityBooking(2)

	// LegalEntityBookingAustralia is the 'Australia' LegalEntityBooking.
	LegalEntityBookingAustralia = LegalEntityBooking(3)

	// LegalEntityBookingNewZealand is the 'New Zealand' LegalEntityBooking.
	LegalEntityBookingNewZealand = LegalEntityBooking(4)

	// LegalEntityBookingUnitedKingdom is the 'United Kingdom' LegalEntityBooking.
	LegalEntityBookingUnitedKingdom = LegalEntityBooking(5)
)

// String returns the string value of the LegalEntityBooking.
func (leb LegalEntityBooking) String() string {
	var enumVal string

	switch leb {
	case LegalEntityBookingHongKong:
		enumVal = "Hong Kong"

	case LegalEntityBookingSingapore:
		enumVal = "Singapore"

	case LegalEntityBookingAustralia:
		enumVal = "Australia"

	case LegalEntityBookingNewZealand:
		enumVal = "New Zealand"

	case LegalEntityBookingUnitedKingdom:
		enumVal = "United Kingdom"
	}

	return enumVal
}

// MarshalText marshals LegalEntityBooking into text.
func (leb LegalEntityBooking) MarshalText() ([]byte, error) {
	return []byte(leb.String()), nil
}

// UnmarshalText unmarshals LegalEntityBooking from text.
func (leb *LegalEntityBooking) UnmarshalText(text []byte) error {
	switch string(text) {
	case "Hong Kong":
		*leb = LegalEntityBookingHongKong

	case "Singapore":
		*leb = LegalEntityBookingSingapore

	case "Australia":
		*leb = LegalEntityBookingAustralia

	case "New Zealand":
		*leb = LegalEntityBookingNewZealand

	case "United Kingdom":
		*leb = LegalEntityBookingUnitedKingdom

	default:
		return errors.New("invalid LegalEntityBooking")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for LegalEntityBooking.
func (leb LegalEntityBooking) Value() (driver.Value, error) {
	return leb.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for LegalEntityBooking.
func (leb *LegalEntityBooking) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid LegalEntityBooking")
	}

	return leb.UnmarshalText(buf)
}
