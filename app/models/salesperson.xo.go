// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"fmt"
)

// SalesPerson represents a row from 'ccdb_dupl.sales_person'.
type SalesPerson struct {
	ID          uint       `json:"_id"`         // _id
	Name        NullString `json:"name"`        // name
	Team        NullString `json:"team"`        // team
	Designation NullString `json:"designation"` // designation

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SalesPerson exists in the database.
func (sp *SalesPerson) Exists() bool {
	return sp._exists
}

// Deleted provides information if the SalesPerson has been deleted from the database.
func (sp *SalesPerson) Deleted() bool {
	return sp._deleted
}

// Insert inserts the SalesPerson to the database.
func (sp *SalesPerson) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ccdb_dupl.sales_person (` +
		`name, team, designation` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, sp.Name, sp.Team, sp.Designation)
	res, err := db.Exec(sqlstr, sp.Name, sp.Team, sp.Designation)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sp.ID = uint(id)
	sp._exists = true

	return nil
}

// Update updates the SalesPerson in the database.
func (sp *SalesPerson) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sp._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ccdb_dupl.sales_person SET ` +
		`name = ?, team = ?, designation = ?` +
		` WHERE _id = ?`

	// run query
	XOLog(sqlstr, sp.Name, sp.Team, sp.Designation, sp.ID)
	_, err = db.Exec(sqlstr, sp.Name, sp.Team, sp.Designation, sp.ID)
	return err
}

// Save saves the SalesPerson to the database.
func (sp *SalesPerson) Save(db XODB) error {
	if sp.Exists() {
		return sp.Update(db)
	}

	return sp.Insert(db)
}

// Delete deletes the SalesPerson from the database.
func (sp *SalesPerson) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	// if !sp._exists {
	// 	return nil
	// }

	// // if deleted, bail
	// if sp._deleted {
	// 	return nil
	// }

	// sql query
	const sqlstr = `DELETE FROM ccdb_dupl.sales_person WHERE _id = ?`

	// run query
	XOLog(sqlstr, sp.ID)
	_, err = db.Exec(sqlstr, sp.ID)
	if err != nil {
		return err
	}

	// set deleted
	sp._deleted = true
	fmt.Println(sp)
	return nil
}

// SalesPersonByID retrieves a row from 'ccdb_dupl.sales_person' as a SalesPerson.
//
// Generated from index 'sales_person__id_pkey'.
func (sp *SalesPerson) ByID(db XODB, id uint) error {
	// sql query
	const sqlstr = `SELECT ` +
		`_id, name, team, designation ` +
		`FROM ccdb_dupl.sales_person ` +
		`WHERE _id = ?`

	// run query
	XOLog(sqlstr, id)
	sp._exists = true

	return db.QueryRow(sqlstr, id).Scan(&sp.ID, &sp.Name, &sp.Team, &sp.Designation)
}

func (sp *SalesPerson) All(db XODB) (interface{}, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`* ` +
		`FROM ccdb_dupl.sales_person `

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SalesPerson{}
	for q.Next() {
		sp := SalesPerson{
			_exists: true,
		}

		// scan
		err = q.Scan(&sp.ID, &sp.Name, &sp.Team, &sp.Designation)
		if err != nil {
			return nil, err
		}

		res = append(res, &sp)
	}

	return res, nil
}
