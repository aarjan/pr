// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// PaymentTerm is the 'payment_terms' enum type from schema 'ccdb_dupl'.
type PaymentTerm uint16

const (
	// PaymentTerm is the '' PaymentTerm.
	NilPaymentTerm = PaymentTerm(1)

	// PaymentTermAnnual is the 'Annual' PaymentTerm.
	PaymentTermAnnual = PaymentTerm(2)

	// PaymentTermQuarterly is the 'Quarterly' PaymentTerm.
	PaymentTermQuarterly = PaymentTerm(3)

	// PaymentTermMonthly is the 'Monthly' PaymentTerm.
	PaymentTermMonthly = PaymentTerm(4)

	// PaymentTermBiAnnual is the 'Bi-Annual' PaymentTerm.
	PaymentTermBiAnnual = PaymentTerm(5)

	// PaymentTermServiceOneOff is the 'Service one-off' PaymentTerm.
	PaymentTermServiceOneOff = PaymentTerm(6)
)

// String returns the string value of the PaymentTerm.
func (pt PaymentTerm) String() string {
	var enumVal string

	switch pt {
	case NilPaymentTerm:
		enumVal = ""

	case PaymentTermAnnual:
		enumVal = "Annual"

	case PaymentTermQuarterly:
		enumVal = "Quarterly"

	case PaymentTermMonthly:
		enumVal = "Monthly"

	case PaymentTermBiAnnual:
		enumVal = "Bi-Annual"

	case PaymentTermServiceOneOff:
		enumVal = "Service one-off"
	}

	return enumVal
}

// MarshalText marshals PaymentTerm into text.
func (pt PaymentTerm) MarshalText() ([]byte, error) {
	return []byte(pt.String()), nil
}

// UnmarshalText unmarshals PaymentTerm from text.
func (pt *PaymentTerm) UnmarshalText(text []byte) error {
	switch string(text) {
	case "":
		*pt = NilPaymentTerm

	case "Annual":
		*pt = PaymentTermAnnual

	case "Quarterly":
		*pt = PaymentTermQuarterly

	case "Monthly":
		*pt = PaymentTermMonthly

	case "Bi-Annual":
		*pt = PaymentTermBiAnnual

	case "Service one-off":
		*pt = PaymentTermServiceOneOff

	default:
		return errors.New("invalid PaymentTerm")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for PaymentTerm.
func (pt PaymentTerm) Value() (driver.Value, error) {
	return pt.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for PaymentTerm.
func (pt *PaymentTerm) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid PaymentTerm")
	}

	return pt.UnmarshalText(buf)
}
