// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// PaymentMode is the 'payment_mode' enum type from schema 'ccdb_dupl'.
type PaymentMode uint16

const (
	// PaymentMode is the '' PaymentMode.
	NilPaymentMode = PaymentMode(1)

	// PaymentModeBankTransfer is the 'Bank transfer' PaymentMode.
	PaymentModeBankTransfer = PaymentMode(2)

	// PaymentModePaypalRecurringActive is the 'PayPal (Recurring-Active)' PaymentMode.
	PaymentModePaypalRecurringActive = PaymentMode(3)

	// PaymentModePaypalRecurringCancelled is the 'PayPal (Recurring-Cancelled)' PaymentMode.
	PaymentModePaypalRecurringCancelled = PaymentMode(4)

	// PaymentModePaypalSinglePayment is the 'PayPal (Single Payment)' PaymentMode.
	PaymentModePaypalSinglePayment = PaymentMode(5)

	// PaymentModeCheque is the 'Cheque' PaymentMode.
	PaymentModeCheque = PaymentMode(6)

	// PaymentModeStripe is the 'Stripe' PaymentMode.
	PaymentModeStripe = PaymentMode(7)

	// PaymentModeCash is the 'Cash' PaymentMode.
	PaymentModeCash = PaymentMode(8)

	// PaymentModeNoCashTransaction is the 'No cash transaction' PaymentMode.
	PaymentModeNoCashTransaction = PaymentMode(9)

	// PaymentModeRenewedWOPayment is the 'Renewed w/o payment' PaymentMode.
	PaymentModeRenewedWOPayment = PaymentMode(10)
)

// String returns the string value of the PaymentMode.
func (pm PaymentMode) String() string {
	var enumVal string

	switch pm {
	case NilPaymentMode:
		enumVal = ""

	case PaymentModeBankTransfer:
		enumVal = "Bank transfer"

	case PaymentModePaypalRecurringActive:
		enumVal = "PayPal (Recurring-Active)"

	case PaymentModePaypalRecurringCancelled:
		enumVal = "PayPal (Recurring-Cancelled)"

	case PaymentModePaypalSinglePayment:
		enumVal = "PayPal (Single Payment)"

	case PaymentModeCheque:
		enumVal = "Cheque"

	case PaymentModeStripe:
		enumVal = "Stripe"

	case PaymentModeCash:
		enumVal = "Cash"

	case PaymentModeNoCashTransaction:
		enumVal = "No cash transaction"

	case PaymentModeRenewedWOPayment:
		enumVal = "Renewed w/o payment"
	}

	return enumVal
}

// MarshalText marshals PaymentMode into text.
func (pm PaymentMode) MarshalText() ([]byte, error) {
	return []byte(pm.String()), nil
}

// UnmarshalText unmarshals PaymentMode from text.
func (pm *PaymentMode) UnmarshalText(text []byte) error {
	switch string(text) {
	case "":
		*pm = NilPaymentMode

	case "Bank transfer":
		*pm = PaymentModeBankTransfer

	case "PayPal (Recurring-Active)":
		*pm = PaymentModePaypalRecurringActive

	case "PayPal (Recurring-Cancelled)":
		*pm = PaymentModePaypalRecurringCancelled

	case "PayPal (Single Payment)":
		*pm = PaymentModePaypalSinglePayment

	case "Cheque":
		*pm = PaymentModeCheque

	case "Stripe":
		*pm = PaymentModeStripe

	case "Cash":
		*pm = PaymentModeCash

	case "No cash transaction":
		*pm = PaymentModeNoCashTransaction

	case "Renewed w/o payment":
		*pm = PaymentModeRenewedWOPayment

	default:
		return errors.New("invalid PaymentMode")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for PaymentMode.
func (pm PaymentMode) Value() (driver.Value, error) {
	return pm.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for PaymentMode.
func (pm *PaymentMode) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid PaymentMode")
	}

	return pm.UnmarshalText(buf)
}
