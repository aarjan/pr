// Package models contains the types for schema 'ccdb_dupl'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Package represents a row from 'ccdb_dupl.package'.
type Package struct {
	ID                uint            `json:"_id"`                 // _id
	Name              Name            `json:"name"`                // name
	CountryOfBilling  sql.NullString  `json:"country_of_billing"`  // country_of_billing
	CurrencyOfBilling sql.NullString  `json:"currency_of_billing"` // currency_of_billing
	PaymentTerms      PaymentTerm     `json:"payment_terms"`       // payment_terms
	Price             sql.NullFloat64 `json:"price"`               // price
	NumberOfMonths    sql.NullInt64   `json:"number_of_months"`    // number_of_months

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Package exists in the database.
func (p *Package) Exists() bool {
	return p._exists
}

// Deleted provides information if the Package has been deleted from the database.
func (p *Package) Deleted() bool {
	return p._deleted
}

// Insert inserts the Package to the database.
func (p *Package) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO ccdb_dupl.package (` +
		`name, country_of_billing, currency_of_billing, payment_terms, price, number_of_months` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.Name, p.CountryOfBilling, p.CurrencyOfBilling, p.PaymentTerms, p.Price, p.NumberOfMonths)
	res, err := db.Exec(sqlstr, p.Name, p.CountryOfBilling, p.CurrencyOfBilling, p.PaymentTerms, p.Price, p.NumberOfMonths)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = uint(id)
	p._exists = true

	return nil
}

// Update updates the Package in the database.
func (p *Package) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ccdb_dupl.package SET ` +
		`name = ?, country_of_billing = ?, currency_of_billing = ?, payment_terms = ?, price = ?, number_of_months = ?` +
		` WHERE _id = ?`

	// run query
	XOLog(sqlstr, p.Name, p.CountryOfBilling, p.CurrencyOfBilling, p.PaymentTerms, p.Price, p.NumberOfMonths, p.ID)
	_, err = db.Exec(sqlstr, p.Name, p.CountryOfBilling, p.CurrencyOfBilling, p.PaymentTerms, p.Price, p.NumberOfMonths, p.ID)
	return err
}

// Save saves the Package to the database.
func (p *Package) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Package from the database.
func (p *Package) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ccdb_dupl.package WHERE _id = ?`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PackageByID retrieves a row from 'ccdb_dupl.package' as a Package.
//
// Generated from index 'package__id_pkey'.
func (p Package) ByID(db XODB, id uint) (interface{}, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`_id, name, country_of_billing, currency_of_billing, payment_terms, price, number_of_months ` +
		`FROM ccdb_dupl.package ` +
		`WHERE _id = ?`

	// run query
	XOLog(sqlstr, id)
	p = Package{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Name, &p.CountryOfBilling, &p.CurrencyOfBilling, &p.PaymentTerms, &p.Price, &p.NumberOfMonths)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

func (p Package) All(db XODB) (interface{}, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`* ` +
		`FROM ccdb_dupl.package `

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Package{}
	for q.Next() {
		p := Package{
			_exists: true,
		}

		// scan
		err = q.Scan(&p.ID, &p.Name, &p.CountryOfBilling, &p.CurrencyOfBilling, &p.PaymentTerms, &p.Price, &p.NumberOfMonths)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}
